{"version":3,"file":"static/js/548.f74936bf.chunk.js","mappings":"+OAIA,aAWE,IAVA,IAAMA,EAAYC,EAAAA,OAAa,MAEzBC,EAAY,GACZC,EAAW,GACXC,EAAa,GAGnB,GAA4BC,EAAAA,EAAAA,UAAS,gBAArC,eAAOC,EAAP,KAAeC,EAAf,KAEIC,EAAc,IAAIC,MAAMP,GACnBQ,EAAI,EAAGA,EAAIR,EAAWQ,IAAK,CAClCF,EAAYE,GAAK,IAAID,MAAMP,GAE3B,IAAK,IAAIS,EAAI,EAAGA,EAAIT,EAAWS,IAC7BH,EAAYE,GAAGC,GAAK,CAEvB,CAGD,OAA8BN,EAAAA,EAAAA,UAASG,GAAvC,eAAQI,EAAR,KAAgBC,EAAhB,KAGA,GAA4BR,EAAAA,EAAAA,WAAS,GAArC,eAAOS,EAAP,KAAeC,EAAf,KACA,GAA4BV,EAAAA,EAAAA,WAAS,GAArC,eAAOW,EAAP,KAAeC,EAAf,KA0BMC,EAAc,WAClB,IAAIC,EAAUnB,EAAUoB,QAAQC,WAAW,MAC3CF,EAAQG,UAAY,QACpBH,EAAQI,SAAS,EAAG,EAAGJ,EAAQK,OAAOC,MAAON,EAAQK,OAAOE,QA1B5C,SAACP,GACjBA,EAAQQ,YAGR,IAAK,IAAIjB,EAAI,EAAGA,EAAIR,EAAWQ,IAE7BS,EAAQS,OAAOxB,EAAaM,EAAIP,EAAUC,GAC1Ce,EAAQU,OACNzB,EAAaM,EAAIP,EACjBC,KAIFe,EAAQS,OAAOxB,EAAYA,EAAaM,EAAIP,GAC5CgB,EAAQU,OACNzB,IACAA,EAAaM,EAAIP,GAIrBgB,EAAQW,QACT,CAMCC,CAAUZ,GACVN,EAAUL,GACVO,GAAU,EACX,GAGDiB,EAAAA,EAAAA,YAAU,WAKRd,GACD,GAAE,IA+LH,OACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAKe,OAAQ,EAAGC,KAAM,MAItB,SAAC,IAAD,CAAKD,OAAQ,EAAGC,KAAM,GAAtB,UACE,UAAC,IAAD,CAAOC,UAAU,WAAjB,WACE,UAAC,IAAD,YACE,SAAC,KAAD,CAAQC,KAAK,UAAUC,QAASnB,EAAhC,4BACCJ,GAAS,UAAC,IAAD,uBAAsBE,EAAtB,OAA8C,SAI5D,mBACEsB,IAAKtC,EACL0B,OAAO,QACPD,MAAM,QACNc,MAAM,QACNF,QA3KQ,SAACG,GACf,GAAI1B,EACF2B,MAAM,gCADR,CAKAC,QAAQC,IAAI,oBAAqBH,GASjC,IARA,IAKII,EAASC,EACTC,EAASC,EANT5B,EAAUnB,EAAUoB,QAAQC,WAAW,MAE3C,EA5CwB,SAACG,EAAQgB,GACjC,IAAMQ,EAAOxB,EAAOyB,wBAGpB,MAAO,CAFGT,EAAMU,QAAUF,EAAKG,KACrBX,EAAMY,QAAUJ,EAAKK,IAEhC,CAuC0BC,CAAkBtD,EAAUoB,QAASoB,GAA9D,eAAOe,EAAP,KAAeC,EAAf,KAMSC,EAAI,EAAGA,EAAIvD,EAAWuD,IAAK,CAClC,IAAMC,EAAWtD,EAAaqD,EAAItD,EAC9BwD,KAAKC,IAAIL,EAASG,GAAYvD,KAChCyC,EAAUc,EACVZ,EAAUW,GAGRE,KAAKC,IAAIJ,EAASE,GAAYvD,KAChC0C,EAAUa,EACVX,EAAUU,EAEb,CAED,GAAiC,IAA7B7C,EAAOkC,GAASC,GAApB,EAvDgB,SAAC5B,EAAS0C,EAASf,EAASC,EAASH,EAASC,GAE5B,IAA9BgB,EAAQf,GAASC,KACnB5B,EAAQQ,YAEO,iBAAXrB,GACFa,EAAQG,UAAY,QACpBH,EAAQ2C,IAAIlB,EAASC,EAAS,GAAI,EAAa,EAAVc,KAAKI,IAAQ,GAClD5C,EAAQW,SAER+B,EAAQf,GAASC,GAAW,IAG5B5B,EAAQG,UAAY,QACpBH,EAAQ2C,IAAIlB,EAASC,EAAS,GAAI,EAAa,EAAVc,KAAKI,IAAQ,GAClD5C,EAAQW,SAER+B,EAAQf,GAASC,GAAW,GAE9BxC,EAAqB,iBAAXD,EAAkB,eAAO,gBACnCO,EAAUgD,GAEV1C,EAAQ6C,OAEX,CAsCCC,CAAU9C,EAFIP,EAAOsD,QAEOpB,EAASC,EAASH,EAASC,IAqGnC,SAACvC,EAAQmD,EAAGU,IAnGd,SAACV,EAAGU,GACpBzB,QAAQC,IAAI,WAAY/B,GAGxB,IAAK,IAAIF,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAM0D,EAASX,EAAI/C,EACb2D,EAASF,EAAIzD,EAEnB,KAAI0D,EAAS,GAAKC,EAAS,GAAKD,EAAS,EAAIlE,GAAamE,EAAS,EAAInE,IAIxC,IAA3BU,EAAOwD,GAAQC,IAIfzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,EAAS,IACzDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,EAAS,IACvDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,EAAS,IACvDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,EAAS,GAErD,OADF3B,QAAQC,IAAI,iCACH,CAEZ,CAGD,IAAK,IAAIjC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAM0D,EAASX,EAAI/C,EACb2D,EAASF,EAAIzD,EAEnB,KAAI0D,EAAS,GAAKC,EAAS,GAAKD,EAAS,EAAIlE,GAAamE,EAAS,EAAInE,IAIxC,IAA3BU,EAAOwD,GAAQC,IAIfzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,EAAS,IACzDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,EAAS,IACvDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,EAAS,IACvDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,EAAS,GAErD,OADF3B,QAAQC,IAAI,iCACH,CAEZ,CAGD,IAAK,IAAIjC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAM0D,EAASX,EAAI/C,EACb2D,EAASF,EAIf,GAFAzB,QAAQC,IAAI,QAASyB,EAAQC,KAEzBD,EAAS,GAAKC,EAAS,GAAKD,EAAS,EAAIlE,GAAamE,EAAS,EAAInE,IAIxC,IAA3BU,EAAOwD,GAAQC,IAIfzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,IAChDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,IAC9CzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,IAC9CzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,EAAS,GAAGC,GAE5C,OADA3B,QAAQC,IAAI,qBACL,CAEZ,CAGD,IAAK,IAAIjC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAM0D,EAASX,EACTY,EAASF,EAAIzD,EAInB,GAFAgC,QAAQC,IAAI,QAASyB,EAAQC,KAEzBD,EAAS,GAAKC,EAAS,GAAKD,EAAS,EAAIlE,GAAamE,EAAS,EAAInE,IAIxC,IAA3BU,EAAOwD,GAAQC,IAIfzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,GAAQC,EAAS,IACrDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,GAAQC,EAAS,IACnDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,GAAQC,EAAS,IACnDzD,EAAOwD,GAAQC,KAAYzD,EAAOwD,GAAQC,EAAS,GAEjD,OADA3B,QAAQC,IAAI,qBACL,CAEZ,CAED,OAAO,CACR,EAKK2B,CAAUb,EAAGU,KACfzB,QAAQC,IAAI,aAAcrC,EAAQmD,EAAGU,GACrCpD,GAAU,GACVE,EAAUX,GAGb,CACDiE,CAAYjE,EAAQwC,EAASC,GAEzBjC,GACF4B,QAAQC,IAAI,aAAc3B,EArH3B,MAFCyB,MAAM,2BAzBP,CAkJF,EAgBK,2HA/QR,E,iCCIe,SAAS+B,IACtB,OAAoBnE,EAAAA,EAAAA,UAAS,MAA7B,eAAWoE,GAAX,WACA,GAA+BpE,EAAAA,EAAAA,UAAS,IAAxC,eAAOqE,EAAP,KAAgBC,EAAhB,KAkCA,OAhCE3C,EAAAA,EAAAA,YAAU,WACN,IAAI4C,EAAY,IAAIC,UAAU,+BAC9BD,EAAUE,OAAS,SAACtC,GAClBE,QAAQC,IAAI,WAAYH,EACzB,EAEDoC,EAAUG,UAAY,SAACC,GACrBtC,QAAQC,IAAI,aAAcqC,GAE1B,IAAMC,EAAOC,KAAKC,MAAMH,EAAGC,MAGzB,GAFAvC,QAAQC,IAAI,WAAYsC,GAGjB,eADCA,EAAK7C,KAETM,QAAQC,IAAI,cAAesC,EAAKG,KAC5BT,EAAYM,EAAKG,IAQ5B,EAEDR,EAAUS,QAAU,SAAC7C,GACnBE,QAAQC,IAAI,YAAaH,EACxB,EAEHiC,EAAMG,EACP,GAAE,KAGL,UAAC,IAAD,YACE,SAAC,IAAD,CAAK1C,KAAM,EAAX,UACE,SAAC,KAAD,CACEoD,WAAW,aACXC,WAAYb,EACZc,WAAY,SAACC,GAAD,OACV,SAAC,UAAD,WACE,SAAC,eAAD,CACEC,QAAQ,SAAC,IAAD,CAAQC,IAAI,uCACpBC,OAAO,cAAGC,KAAK,qBAAR,SAA8BJ,EAAKK,SAC1CC,YAAaN,EAAKO,MALZ,OAWhB,SAAC,IAAD,CAAK9D,KAAM,EAAX,UACI,SAAC,KAAD,OAGJ,SAAC,IAAD,WACE,SAAC+D,EAAD,QAQP,C","sources":["component/CanvasPannel.jsx","view/Game.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Row, Col, Button, Space, Typography } from \"antd\";\r\nimport \"./CanvasPannel.module.css\";\r\n\r\nexport default () => {\r\n  const canvasRef = React.useRef(null);\r\n\r\n  const num_lines = 19;\r\n  const line_gap = 20;\r\n  const border_gap = 10;\r\n\r\n  // black: false, white: true\r\n  const [player, setPlayer] = useState(\"黑方\")\r\n\r\n  let init_matrix = new Array(num_lines); \r\n  for (let i = 0; i < num_lines; i++) {\r\n    init_matrix[i] = new Array(num_lines);\r\n\r\n    for (let j = 0; j < num_lines; j++) {\r\n      init_matrix[i][j] = 0;\r\n    }\r\n  }\r\n\r\n  // 0: 无落子， 1：白子， 2：黑子\r\n  const [ matrix, setMatrix ] = useState(init_matrix)\r\n\r\n  // 是否游戏结束\r\n  const [finish, setFinish] = useState(false)\r\n  const [winner, setWinner] = useState(false)\r\n\r\n\r\n  const drawBoard = (context) => {\r\n    context.beginPath();\r\n\r\n    // 19条竖线和横线\r\n    for (let i = 0; i < num_lines; i++) {\r\n      // 竖线绘制\r\n      context.moveTo(border_gap + i * line_gap, border_gap);\r\n      context.lineTo(\r\n        border_gap + i * line_gap,\r\n        border_gap + (num_lines - 1) * line_gap\r\n      );\r\n\r\n      // 横线绘制\r\n      context.moveTo(border_gap, border_gap + i * line_gap);\r\n      context.lineTo(\r\n        border_gap + (num_lines - 1) * line_gap,\r\n        border_gap + i * line_gap\r\n      );\r\n    }\r\n\r\n    context.stroke();\r\n  };\r\n\r\n  const restartGame = () => {\r\n    var context = canvasRef.current.getContext(\"2d\");\r\n    context.fillStyle = \"green\";\r\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n    drawBoard(context)\r\n    setMatrix(init_matrix)\r\n    setFinish(false)\r\n  }\r\n\r\n  // 初始棋牌绘制\r\n  useEffect(() => {\r\n    // var context = canvasRef.current.getContext(\"2d\");\r\n    // context.fillStyle = \"green\";\r\n    // context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n    // drawBoard(context);\r\n    restartGame()\r\n  }, []);\r\n\r\n\r\n\r\n  const getCursorPosition = (canvas, event) => {\r\n    const rect = canvas.getBoundingClientRect();\r\n    const x = event.clientX - rect.left;\r\n    const y = event.clientY - rect.top;\r\n    return [x, y];\r\n  };\r\n\r\n\r\n  const drawPiece = (context, tmatrix, mtxPosX, mtxPosY, arcPosX, arcPosY) => {\r\n    // 画出棋子\r\n    if (tmatrix[mtxPosX][mtxPosY] === 0) {\r\n      context.beginPath();\r\n\r\n      if (player === \"白方\") {\r\n        context.fillStyle = \"white\";\r\n        context.arc(arcPosX, arcPosY, 10, 0, Math.PI * 2, false);\r\n        context.stroke();\r\n        // 白子为1\r\n        tmatrix[mtxPosX][mtxPosY] = 1;\r\n\r\n      } else {\r\n        context.fillStyle = \"black\";\r\n        context.arc(arcPosX, arcPosY, 10, 0, Math.PI * 2, false);\r\n        context.stroke();\r\n        // 黑子为2\r\n        tmatrix[mtxPosX][mtxPosY] = 2;\r\n      }\r\n      setPlayer(player === \"黑方\" ? \"白方\" : \"黑方\")\r\n      setMatrix(tmatrix)\r\n\r\n      context.fill();\r\n    }\r\n  }\r\n\r\n\r\n  const onClick = (event) => {\r\n    if (finish) {\r\n      alert(\"游戏结束\")\r\n      return\r\n    }\r\n\r\n    console.log(\"onClick execute: \", event);\r\n    var context = canvasRef.current.getContext(\"2d\");\r\n  \r\n    const [clickX, clickY] = getCursorPosition(canvasRef.current, event);\r\n\r\n    // 保存要落子的坐标\r\n    let arcPosX, arcPosY; // 保存棋子在数组中的位置\r\n    let mtxPosX, mtxPosY; // 和每一条线进行比较，如果相差10个像素以内，即，靠近\r\n\r\n    for (let x = 0; x < num_lines; x++) {\r\n      const line_pos = border_gap + x * line_gap;\r\n      if (Math.abs(clickX - line_pos) < line_gap / 2) {\r\n        arcPosX = line_pos;\r\n        mtxPosX = x;\r\n      }\r\n\r\n      if (Math.abs(clickY - line_pos) < line_gap / 2) {\r\n        arcPosY = line_pos;\r\n        mtxPosY = x;\r\n      }\r\n    }\r\n\r\n    if (matrix[mtxPosX][mtxPosY] !== 0) {\r\n      alert(\"已有落子\")\r\n      return \r\n    }\r\n\r\n    let tmatrix = matrix.slice()\r\n\r\n    drawPiece(context, tmatrix, mtxPosX, mtxPosY, arcPosX, arcPosY)\r\n\r\n    const checkLine = (x, y) => {\r\n      console.log(\"matrix: \", matrix)\r\n\r\n      // 主对角线\r\n      for (let i = 0; i < 5; i++) {\r\n        const startx = x - i;\r\n        const starty = y - i;\r\n\r\n        if (startx < 0 || starty < 0 || startx + 4 > num_lines || starty + 4 > num_lines) {\r\n          continue;\r\n        }\r\n\r\n        if (matrix[startx][starty] === 0) {\r\n          continue;\r\n        }\r\n\r\n        if (matrix[startx][starty] === matrix[startx + 1][starty + 1] &&\r\n          matrix[startx][starty] === matrix[startx + 2][starty + 2] && \r\n          matrix[startx][starty] === matrix[startx + 3][starty + 3] && \r\n          matrix[startx][starty] === matrix[startx + 4][starty + 4]) {\r\n          console.log(\"主对角线 win\")\r\n            return true\r\n        }\r\n      }\r\n\r\n      // 次对角线\r\n      for (let i = 0; i < 5; i++) {\r\n        const startx = x - i;\r\n        const starty = y + i;\r\n\r\n        if (startx < 0 || starty < 0 || startx + 4 > num_lines || starty + 4 > num_lines) {\r\n          continue;\r\n        }\r\n\r\n        if (matrix[startx][starty] === 0) {\r\n          continue;\r\n        }\r\n\r\n        if (matrix[startx][starty] === matrix[startx + 1][starty - 1] &&\r\n          matrix[startx][starty] === matrix[startx + 2][starty - 2] && \r\n          matrix[startx][starty] === matrix[startx + 3][starty - 3] && \r\n          matrix[startx][starty] === matrix[startx + 4][starty - 4]) {\r\n          console.log(\"主对角线 win\")\r\n            return true\r\n        }\r\n      }\r\n\r\n      // 横线\r\n      for (let i = 0; i < 5; i++) {\r\n        const startx = x - i;\r\n        const starty = y;\r\n\r\n        console.log(\"pos: \", startx, starty)\r\n\r\n        if (startx < 0 || starty < 0 || startx + 4 > num_lines || starty + 4 > num_lines) {\r\n          continue;\r\n        }\r\n\r\n        if (matrix[startx][starty] === 0) {\r\n          continue;\r\n        }\r\n\r\n        if (matrix[startx][starty] === matrix[startx + 1][starty] &&\r\n          matrix[startx][starty] === matrix[startx + 2][starty] && \r\n          matrix[startx][starty] === matrix[startx + 3][starty] && \r\n          matrix[startx][starty] === matrix[startx + 4][starty]) {\r\n            console.log(\"横线 win\")\r\n            return true\r\n        }\r\n      }\r\n\r\n      // 竖线\r\n      for (let i = 0; i < 5; i++) {\r\n        const startx = x;\r\n        const starty = y - i;\r\n\r\n        console.log(\"pos: \", startx, starty)\r\n\r\n        if (startx < 0 || starty < 0 || startx + 4 > num_lines || starty + 4 > num_lines) {\r\n          continue;\r\n        }\r\n\r\n        if (matrix[startx][starty] === 0) {\r\n          continue;\r\n        }\r\n\r\n        if (matrix[startx][starty] === matrix[startx][starty + 1] &&\r\n          matrix[startx][starty] === matrix[startx][starty + 2] && \r\n          matrix[startx][starty] === matrix[startx][starty + 3] && \r\n          matrix[startx][starty] === matrix[startx][starty + 4]) {\r\n            console.log(\"横线 win\")\r\n            return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n\r\n    // 玩家在x，y处落子， 能否获胜\r\n    const checkWinner = (player, x, y) => {\r\n      // 获胜检测\r\n      if (checkLine(x, y)) {\r\n        console.log(\"winner is:\", player, x, y)\r\n        setFinish(true)\r\n        setWinner(player)\r\n      }\r\n\r\n    }\r\n    checkWinner(player, mtxPosX, mtxPosY)\r\n\r\n    if (finish) {\r\n      console.log(\"winner is:\", winner)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col offset={8} span={16}>\r\n\r\n      </Col>\r\n\r\n      <Col offset={8} span={16}>\r\n        <Space direction=\"vertical\">\r\n          <Space>\r\n            <Button type=\"primary\" onClick={restartGame}> 开始 </Button>\r\n            {finish ? <Typography> Winner: {winner} </Typography> : null}\r\n          </Space>\r\n\r\n        \r\n        <canvas\r\n          ref={canvasRef}\r\n          height=\"400px\"\r\n          width=\"400px\"\r\n          color=\"green\"\r\n          onClick={onClick}\r\n        >\r\n          您的浏览器不支持canvas，请更换浏览器！\r\n          </canvas>\r\n          </Space>\r\n      </Col>\r\n\r\n    </Row>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport CanvasPannel from \"../component/CanvasPannel\";\r\nimport { Row, Col, Space } from 'antd';\r\nimport { List, Avatar } from 'antd';\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nexport default function Game() {\r\n  const [ws, setWS] = useState(null)\r\n  const [useList, setUserList] = useState([])\r\n\r\n    useEffect(() => {\r\n        let websocket = new WebSocket(\"ws://localhost:8000/ws/game\")\r\n        websocket.onopen = (event) => {\r\n          console.log(\"onopen: \", event);\r\n        };\r\n    \r\n        websocket.onmessage = (ev) => {\r\n          console.log(\"onmessage:\", ev);\r\n    \r\n          const data = JSON.parse(ev.data);\r\n            console.log(\"receive:\", data);\r\n            \r\n            switch (data.type) {\r\n              case \"chat_login\":\r\n                console.log(\"chat_login:\", data.msg)\r\n                    setUserList(data.msg)\r\n                    break\r\n                // case \"chat_text\":\r\n                //     setMsgList(data.msg)\r\n                //     break\r\n                default:\r\n                    break\r\n            }\r\n        };\r\n    \r\n        websocket.onerror = (event) => {\r\n          console.log(\"onerror: \", event);\r\n          };\r\n        \r\n        setWS(websocket)\r\n      }, []);\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={4}>\r\n        <List\r\n          itemLayout=\"horizontal\"\r\n          dataSource={useList}\r\n          renderItem={(item) => (\r\n            <List.Item>\r\n              <List.Item.Meta\r\n                avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\r\n                title={<a href=\"https://ant.design\">{item.client}</a>}\r\n                description={item.ua}\r\n              />\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </Col>\r\n      <Col span={4}>\r\n          <Outlet />\r\n      </Col>\r\n      \r\n      <Col>\r\n        <CanvasPannel>\r\n\r\n        </CanvasPannel>\r\n      </Col>\r\n\r\n      </Row>\r\n\r\n    )\r\n}"],"names":["canvasRef","React","num_lines","line_gap","border_gap","useState","player","setPlayer","init_matrix","Array","i","j","matrix","setMatrix","finish","setFinish","winner","setWinner","restartGame","context","current","getContext","fillStyle","fillRect","canvas","width","height","beginPath","moveTo","lineTo","stroke","drawBoard","useEffect","offset","span","direction","type","onClick","ref","color","event","alert","console","log","arcPosX","arcPosY","mtxPosX","mtxPosY","rect","getBoundingClientRect","clientX","left","clientY","top","getCursorPosition","clickX","clickY","x","line_pos","Math","abs","tmatrix","arc","PI","fill","drawPiece","slice","y","startx","starty","checkLine","checkWinner","Game","setWS","useList","setUserList","websocket","WebSocket","onopen","onmessage","ev","data","JSON","parse","msg","onerror","itemLayout","dataSource","renderItem","item","avatar","src","title","href","client","description","ua","CanvasPannel"],"sourceRoot":""}